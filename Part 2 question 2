public class Account {
    private String accountNumber;
    protected double balance; // Protected access for subclasses
    private double annualInterestRate;

    public Account(String accountNumber, double balance, double annualInterestRate) {
        this.accountNumber = accountNumber;
        this.balance = balance;
        this.annualInterestRate = annualInterestRate;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.printf("Deposited %.2f%n", amount);
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    public boolean withdraw(double amount) {
        if (amount > 0) {
            if (balance >= amount) {
                balance -= amount;
                System.out.printf("Withdrawn %.2f%n", amount);
                return true;
            } else {
                System.out.println("Insufficient funds.");
                return false;
            }
        } else {
            System.out.println("Withdrawal amount must be positive.");
            return false;
        }
    }

    public void applyInterest() {
        double monthlyInterestRate = annualInterestRate / 12;
        double interest = balance * monthlyInterestRate;
        balance += interest;
        System.out.printf("Interest applied: %.2f%n", interest);
    }

    public double getBalance() {
        return balance;
    }

    public String getAccountNumber() {
        return accountNumber;
    }
}
..................................................................................................

public class SavingsAccount extends Account {
    public SavingsAccount(String accountNumber, double balance, double annualInterestRate) {
        super(accountNumber, balance, annualInterestRate);
    }

    @Override
    public boolean withdraw(double amount) {
        if (amount > 0) {
            if (getBalance() >= amount) {
                balance -= amount;
                System.out.printf("Withdrawn %.2f%n", amount);
                return true;
            } else {
                System.out.println("Insufficient funds.");
                return false;
            }
        } else {
            System.out.println("Withdrawal amount must be positive.");
            return false;
        }
    }

    @Override
    public String toString() {
        return String.format("Savings Account %s: Balance = %.2f", getAccountNumber(), getBalance());
    }
}


.............................................................................................................

public class CheckingAccount extends Account {
    private double overdraftLimit;

    public CheckingAccount(String accountNumber, double balance, double annualInterestRate, double overdraftLimit) {
        super(accountNumber, balance, annualInterestRate);
        this.overdraftLimit = overdraftLimit;
    }

    @Override
    public boolean withdraw(double amount) {
        if (amount > 0) {
            if (getBalance() + overdraftLimit >= amount) {
                balance -= amount;
                System.out.printf("Withdrawn %.2f%n", amount);
                return true;
            } else {
                System.out.println("Exceeds overdraft limit.");
                return false;
            }
        } else {
            System.out.println("Withdrawal amount must be positive.");
            return false;
        }
    }

    @Override
    public String toString() {
        return String.format("Checking Account %s: Balance = %.2f", getAccountNumber(), getBalance());
    }
}

........................................................................................................................

public class Main {
    public static void main(String[] args) {
        // Creating instances of accounts
        CheckingAccount checking = new CheckingAccount("12345", 1000, 0.02, 500);
        SavingsAccount savings = new SavingsAccount("54321", 2000, 0.015);

        // Depositing and withdrawing from checking account
        checking.deposit(500);
        checking.withdraw(200);
        System.out.println(checking);

        // Depositing and withdrawing from savings account
        savings.deposit(100);
        savings.withdraw(3000); // Should print "Insufficient funds."
        System.out.println(savings);

        // Applying interest to savings account
        savings.applyInterest();
        System.out.println(savings);
    }
}
............................................................................................................
